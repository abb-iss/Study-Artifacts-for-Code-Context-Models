diff --git a/FreeMind_integration/accessories/plugins/ExportWithXSLT.java b/FreeMind_integration/accessories/plugins/ExportWithXSLT.java
index 8a336bf..f9c47fe 100644
--- a/FreeMind_integration/accessories/plugins/ExportWithXSLT.java
+++ b/FreeMind_integration/accessories/plugins/ExportWithXSLT.java
@@ -98,7 +98,13 @@
 			 if(model == null) 
 				 return; // there may be no map open
 			 if((model.getFile() == null) || model.isReadOnly()) {
-				if(mc.save()) {
+				boolean success=false;
+		        try{
+		        	success = mc.save();
+		        } catch(IOException e_save){
+		        	Resources.getInstance().logException(e_save);
+		        }
+				if(success) {
 					export(model.getFile());
 					return;
 				}
diff --git a/FreeMind_integration/accessories/plugins/SaveAll.java b/FreeMind_integration/accessories/plugins/SaveAll.java
index 2a111d0..d2961cd 100644
--- a/FreeMind_integration/accessories/plugins/SaveAll.java
+++ b/FreeMind_integration/accessories/plugins/SaveAll.java
@@ -23,6 +23,7 @@
  */
 package accessories.plugins;
 
+import java.io.IOException;
 import java.util.Iterator;
 import java.util.Map;
 import java.util.Vector;
@@ -31,6 +32,7 @@
 
 import freemind.controller.Controller;
 import freemind.extensions.ModeControllerHookAdapter;
+import freemind.main.Resources;
 import freemind.view.MapModule;
 
 /**
@@ -59,7 +61,13 @@
             MapModule module = (MapModule) iter.next();
             // change to module to display map properly.
             mainController.getMapModuleManager().changeToMapModule(module.toString());
-            if (!module.getModeController().save()) {
+            boolean result=false;
+            try{
+            	result=module.getModeController().save();
+            } catch(IOException e_save){
+	        	Resources.getInstance().logException(e_save);
+	        }
+            if (!result) {
                 // if not successfully, break the action.
                 JOptionPane.showMessageDialog(getController().getFrame()
                         .getContentPane(),
diff --git a/FreeMind_integration/freemind/modes/ControllerAdapter.java b/FreeMind_integration/freemind/modes/ControllerAdapter.java
index 72ee412..dda3154 100644
--- a/FreeMind_integration/freemind/modes/ControllerAdapter.java
+++ b/FreeMind_integration/freemind/modes/ControllerAdapter.java
@@ -53,7 +53,9 @@
 import java.util.List;
 import java.util.ListIterator;
 import java.util.Set;
+import java.util.logging.Handler;
 import java.util.logging.Level;
+import java.util.logging.StreamHandler;
 
 import javax.swing.AbstractAction;
 import javax.swing.Action;
@@ -370,7 +372,7 @@
     	return newModeController;
     }
     
-    public boolean save() {
+    public boolean save() throws IOException {
         if (getModel().isSaved()) return true;
         if (getModel().getFile() == null || getModel().isReadOnly()) {
            return saveAs(); }
@@ -557,8 +559,9 @@
      * Return false is the action was cancelled, e.g. when
      * it has to lead to saving as.
      */
-    public boolean save(File file) {
-       return getModel().save(file); }
+    public boolean save(File file) throws IOException {
+       return getModel().save(file); 
+    }
 
     /** @return returns the new JMenuItem.*/
     protected JMenuItem add(JMenu menu, Action action, String keystroke) {
@@ -720,7 +723,11 @@
 		    Tools.expandPlaceholders(getText("locking_failed_by_save_as"), f.getName()));
 		  return false; }
 
-        save(f);
+		try{
+			save(f);
+		} catch(IOException e_save){
+        	Resources.getInstance().logException(e_save);
+        }
         //Update the name of the map
         getController().getMapModuleManager().updateMapModuleName();
         return true;
@@ -756,7 +763,12 @@
             int returnVal = JOptionPane.showOptionDialog(getFrame().getContentPane(),text,title,JOptionPane.YES_NO_CANCEL_OPTION,
                                                          JOptionPane.QUESTION_MESSAGE,null,null,null);
             if (returnVal==JOptionPane.YES_OPTION) {
-               boolean savingNotCancelled = save();
+            	boolean savingNotCancelled=false;
+            	try{
+            		savingNotCancelled = save();
+            	} catch(IOException e_save){
+                	Resources.getInstance().logException(e_save);
+                }
                if (!savingNotCancelled) {
                	  return false; }}
 			else if ((returnVal==JOptionPane.CANCEL_OPTION) || (returnVal == JOptionPane.CLOSED_OPTION)) {
@@ -966,11 +978,22 @@
             mc = modeController;
         }
         public void actionPerformed(ActionEvent e) {
-            boolean success = mc.save();
+        	boolean success=false;
+        	String possibleError="default";
+        	Handler h = new StreamHandler();
+        	logger.addHandler(h);
+        	try{
+        		success = mc.save();
+        	} catch(IOException e_save){
+        		possibleError=e_save.getMessage();
+        		System.out.println("$$$ possibleError: " + possibleError);
+        	}
             if (success) {
 				getFrame().out(getText("saved")); // perhaps... (PN)
 			} else {
-				String message = "Saving failed.";
+				String possibleError_t = h.getFormatter().getTail(h);
+				String possibleError_h = h.getFormatter().getHead(h);
+				String message = "Saving failed: " + possibleError_t + " | " + possibleError_h;
 				getFrame().out(message); 
 				getController().errorMessage(message);
 			}
diff --git a/FreeMind_integration/freemind/modes/MapAdapter.java b/FreeMind_integration/freemind/modes/MapAdapter.java
index 4ef2fca..d95e9e6 100644
--- a/FreeMind_integration/freemind/modes/MapAdapter.java
+++ b/FreeMind_integration/freemind/modes/MapAdapter.java
@@ -92,7 +92,7 @@
     // Abstract methods that _must_ be implemented.
     //
 
-    public abstract boolean save(File file);
+    public abstract boolean save(File file) throws IOException;
 
     public abstract void load(URL file) throws FileNotFoundException, IOException, XMLParseException, URISyntaxException ;
     public void load(File file) throws FileNotFoundException, IOException{
diff --git a/FreeMind_integration/freemind/modes/ModeController.java b/FreeMind_integration/freemind/modes/ModeController.java
index 44b2c3e..441591f 100644
--- a/FreeMind_integration/freemind/modes/ModeController.java
+++ b/FreeMind_integration/freemind/modes/ModeController.java
@@ -74,12 +74,13 @@
      * * another file.
      */
     void loadURL(String relative);
-    boolean save(File file);
+    boolean save(File file) throws IOException;
     MindMap newMap();
     /**
      * @return true, if successfully saved. False, if canceled or exception.
+     * @throws IOException 
      */
-    boolean save();
+    boolean save() throws IOException;
     boolean saveAs();
     void open();
     boolean close(boolean force, MapModuleManager mapModuleManager);
diff --git a/FreeMind_integration/freemind/modes/mindmapmode/MindMapController.java b/FreeMind_integration/freemind/modes/mindmapmode/MindMapController.java
index 6915613..286447a 100644
--- a/FreeMind_integration/freemind/modes/mindmapmode/MindMapController.java
+++ b/FreeMind_integration/freemind/modes/mindmapmode/MindMapController.java
@@ -1602,7 +1602,12 @@
     public void loadURL(String relative) {
         if (getMap().getFile() == null) {
             getFrame().out("You must save the current map first!");
-            boolean result = save();
+            boolean result = false;
+            try{
+            	result=save();
+            } catch(IOException e_save){
+	        	Resources.getInstance().logException(e_save);
+	        }
             // canceled??
             if(!result) {
                 return;
diff --git a/FreeMind_integration/freemind/modes/mindmapmode/MindMapMapModel.java b/FreeMind_integration/freemind/modes/mindmapmode/MindMapMapModel.java
index a9579ed..016c813 100644
--- a/FreeMind_integration/freemind/modes/mindmapmode/MindMapMapModel.java
+++ b/FreeMind_integration/freemind/modes/mindmapmode/MindMapMapModel.java
@@ -242,12 +242,12 @@
     /**
      * Return the success of saving
      */
-    public boolean save(File file) {
-        return saveInternal(file, false);
+    public boolean save(File file) throws IOException {
+    	return saveInternal(file, false);
     }
 
     /** This method is intended to provide both normal save routines and saving of temporary (internal) files.*/
-    private boolean saveInternal(File file, boolean isInternal) {
+    private boolean saveInternal(File file, boolean isInternal) throws IOException {
         if (!isInternal && readOnly) { // unexpected situation, yet it's better to back it up
             System.err.println("Attempt to save read-only map.");
             return false; }
diff --git a/FreeMind_integration/freemind/modes/mindmapmode/actions/ExportBranchAction.java b/FreeMind_integration/freemind/modes/mindmapmode/actions/ExportBranchAction.java
index b15d46a..8f411ee 100644
--- a/FreeMind_integration/freemind/modes/mindmapmode/actions/ExportBranchAction.java
+++ b/FreeMind_integration/freemind/modes/mindmapmode/actions/ExportBranchAction.java
@@ -22,6 +22,7 @@
 
 import java.awt.event.ActionEvent;
 import java.io.File;
+import java.io.IOException;
 import java.net.MalformedURLException;
 import java.net.URL;
 
@@ -60,7 +61,11 @@
         if (mMindMapController.getMap().getFile() == null) {
             mMindMapController.getFrame().out(
                     "You must save the current map first!");
-            mMindMapController.save();
+            try{
+            	mMindMapController.save();
+            } catch(IOException e_save){
+                Resources.getInstance().logException(e_save);
+            }
         }
 
         // Open FileChooser to choose in which file the exported
@@ -134,7 +139,12 @@
                     .createModeController();
             MindMapMapModel map = new MindMapMapModel(node, mMindMapController
                     .getFrame(), newModeController);
-            map.save(chosenFile);
+            try{
+            	map.save(chosenFile);
+            }
+            catch(IOException e_save){
+            	Resources.getInstance().logException(e_save);
+            }
             // new node instead:
             MindMapNode newNode = mMindMapController.addNewNode(parent,
                     nodePosition, node.isLeft());
diff --git a/FreeMind_integration/freemind/modes/schememode/SchemeController.java b/FreeMind_integration/freemind/modes/schememode/SchemeController.java
index dc4a55d..12f7b3d 100644
--- a/FreeMind_integration/freemind/modes/schememode/SchemeController.java
+++ b/FreeMind_integration/freemind/modes/schememode/SchemeController.java
@@ -22,6 +22,7 @@
 
 import java.awt.event.ActionEvent;
 import java.io.File;
+import java.io.IOException;
 import java.util.StringTokenizer;
 
 import javax.swing.AbstractAction;
@@ -33,6 +34,7 @@
 import freemind.controller.MenuBar;
 import freemind.controller.StructuredMenuHolder;
 import freemind.extensions.HookFactory;
+import freemind.main.Resources;
 import freemind.modes.MapAdapter;
 import freemind.modes.MindMap;
 import freemind.modes.MindMapNode;
@@ -88,7 +90,12 @@
 			//      if(!ext.equals(freemind.main.FreeMindCommon.FREEMIND_FILE_EXTENSION_WITHOUT_DOT)) {
 			//          f = new File(f.getParent(),f.getName()+freemind.main.FreeMindCommon.FREEMIND_FILE_EXTENSION);
 			//      }
-			save(f);
+            try{
+            	save(f);
+            } catch(IOException e_save){
+	        	Resources.getInstance().logException(e_save);
+	        }
+			
 			//Update the name of the map
 			updateMapModuleName();
 			return true;