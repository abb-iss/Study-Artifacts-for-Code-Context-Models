diff --git a/FreeMind_integration/accessories/plugins/ExportWithXSLT.java b/FreeMind_integration/accessories/plugins/ExportWithXSLT.java
index 8a336bf..ea717cb 100644
--- a/FreeMind_integration/accessories/plugins/ExportWithXSLT.java
+++ b/FreeMind_integration/accessories/plugins/ExportWithXSLT.java
@@ -98,12 +98,17 @@
 			 if(model == null) 
 				 return; // there may be no map open
 			 if((model.getFile() == null) || model.isReadOnly()) {
-				if(mc.save()) {
-					export(model.getFile());
-					return;
+				try {
+					if(mc.save()) {
+						export(model.getFile());
+						return;
+					}
+					else
+						return;
+				} catch (Exception e) {
+					// TODO Auto-generated catch block
+					e.printStackTrace();
 				}
-				else
-					return;
 			 }
 			 else
 				 export(model.getFile());
diff --git a/FreeMind_integration/accessories/plugins/SaveAll.java b/FreeMind_integration/accessories/plugins/SaveAll.java
index 2a111d0..b906300 100644
--- a/FreeMind_integration/accessories/plugins/SaveAll.java
+++ b/FreeMind_integration/accessories/plugins/SaveAll.java
@@ -23,6 +23,7 @@
  */
 package accessories.plugins;
 
+import java.awt.HeadlessException;
 import java.util.Iterator;
 import java.util.Map;
 import java.util.Vector;
@@ -59,14 +60,22 @@
             MapModule module = (MapModule) iter.next();
             // change to module to display map properly.
             mainController.getMapModuleManager().changeToMapModule(module.toString());
-            if (!module.getModeController().save()) {
-                // if not successfully, break the action.
-                JOptionPane.showMessageDialog(getController().getFrame()
-                        .getContentPane(),
-                        "FreeMind",
-                        getResourceString("accessories/plugins/SaveAll.properties_save_all_cancelled"), JOptionPane.ERROR_MESSAGE);
-                return;
-            }
+            try {
+				if (!module.getModeController().save()) {
+				    // if not successfully, break the action.
+				    JOptionPane.showMessageDialog(getController().getFrame()
+				            .getContentPane(),
+				            "FreeMind",
+				            getResourceString("accessories/plugins/SaveAll.properties_save_all_cancelled"), JOptionPane.ERROR_MESSAGE);
+				    return;
+				}
+			} catch (HeadlessException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			} catch (Exception e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
         }
         mainController.getMapModuleManager().changeToMapModule(initialMapModule.toString());
     }
diff --git a/FreeMind_integration/freemind/modes/ControllerAdapter.java b/FreeMind_integration/freemind/modes/ControllerAdapter.java
index 72ee412..8d1bf7f 100644
--- a/FreeMind_integration/freemind/modes/ControllerAdapter.java
+++ b/FreeMind_integration/freemind/modes/ControllerAdapter.java
@@ -370,7 +370,7 @@
     	return newModeController;
     }
     
-    public boolean save() {
+    public boolean save() throws Exception {
         if (getModel().isSaved()) return true;
         if (getModel().getFile() == null || getModel().isReadOnly()) {
            return saveAs(); }
@@ -556,8 +556,9 @@
 	/**
      * Return false is the action was cancelled, e.g. when
      * it has to lead to saving as.
+	 * @throws Exception 
      */
-    public boolean save(File file) {
+    public boolean save(File file) throws Exception {
        return getModel().save(file); }
 
     /** @return returns the new JMenuItem.*/
@@ -720,7 +721,12 @@
 		    Tools.expandPlaceholders(getText("locking_failed_by_save_as"), f.getName()));
 		  return false; }
 
-        save(f);
+        try {
+			save(f);
+		} catch (Exception e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
         //Update the name of the map
         getController().getMapModuleManager().updateMapModuleName();
         return true;
@@ -756,7 +762,13 @@
             int returnVal = JOptionPane.showOptionDialog(getFrame().getContentPane(),text,title,JOptionPane.YES_NO_CANCEL_OPTION,
                                                          JOptionPane.QUESTION_MESSAGE,null,null,null);
             if (returnVal==JOptionPane.YES_OPTION) {
-               boolean savingNotCancelled = save();
+               boolean savingNotCancelled = false;
+			try {
+				savingNotCancelled = save();
+			} catch (Exception e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
                if (!savingNotCancelled) {
                	  return false; }}
 			else if ((returnVal==JOptionPane.CANCEL_OPTION) || (returnVal == JOptionPane.CLOSED_OPTION)) {
@@ -966,11 +978,16 @@
             mc = modeController;
         }
         public void actionPerformed(ActionEvent e) {
-            boolean success = mc.save();
+            boolean success = false;
+            String message = "";
+			try {
+				success = mc.save();
+			} catch (Exception e1) {
+				message = e1.getMessage();
+			}
             if (success) {
 				getFrame().out(getText("saved")); // perhaps... (PN)
 			} else {
-				String message = "Saving failed.";
 				getFrame().out(message); 
 				getController().errorMessage(message);
 			}
diff --git a/FreeMind_integration/freemind/modes/MapAdapter.java b/FreeMind_integration/freemind/modes/MapAdapter.java
index 4ef2fca..c5b8e40 100644
--- a/FreeMind_integration/freemind/modes/MapAdapter.java
+++ b/FreeMind_integration/freemind/modes/MapAdapter.java
@@ -92,7 +92,7 @@
     // Abstract methods that _must_ be implemented.
     //
 
-    public abstract boolean save(File file);
+    public abstract boolean save(File file) throws Exception;
 
     public abstract void load(URL file) throws FileNotFoundException, IOException, XMLParseException, URISyntaxException ;
     public void load(File file) throws FileNotFoundException, IOException{
diff --git a/FreeMind_integration/freemind/modes/ModeController.java b/FreeMind_integration/freemind/modes/ModeController.java
index 44b2c3e..81c43ff 100644
--- a/FreeMind_integration/freemind/modes/ModeController.java
+++ b/FreeMind_integration/freemind/modes/ModeController.java
@@ -74,12 +74,13 @@
      * * another file.
      */
     void loadURL(String relative);
-    boolean save(File file);
+    boolean save(File file) throws Exception;
     MindMap newMap();
     /**
      * @return true, if successfully saved. False, if canceled or exception.
+     * @throws Exception 
      */
-    boolean save();
+    boolean save() throws Exception;
     boolean saveAs();
     void open();
     boolean close(boolean force, MapModuleManager mapModuleManager);
diff --git a/FreeMind_integration/freemind/modes/mindmapmode/MindMapController.java b/FreeMind_integration/freemind/modes/mindmapmode/MindMapController.java
index 6915613..d0b8466 100644
--- a/FreeMind_integration/freemind/modes/mindmapmode/MindMapController.java
+++ b/FreeMind_integration/freemind/modes/mindmapmode/MindMapController.java
@@ -1602,7 +1602,13 @@
     public void loadURL(String relative) {
         if (getMap().getFile() == null) {
             getFrame().out("You must save the current map first!");
-            boolean result = save();
+            boolean result = false;
+			try {
+				result = save();
+			} catch (Exception e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
             // canceled??
             if(!result) {
                 return;
diff --git a/FreeMind_integration/freemind/modes/mindmapmode/MindMapMapModel.java b/FreeMind_integration/freemind/modes/mindmapmode/MindMapMapModel.java
index a9579ed..525ee0b 100644
--- a/FreeMind_integration/freemind/modes/mindmapmode/MindMapMapModel.java
+++ b/FreeMind_integration/freemind/modes/mindmapmode/MindMapMapModel.java
@@ -241,13 +241,15 @@
             return false; }}
     /**
      * Return the success of saving
+     * @throws Exception 
      */
-    public boolean save(File file) {
+    public boolean save(File file) throws Exception {
         return saveInternal(file, false);
     }
 
-    /** This method is intended to provide both normal save routines and saving of temporary (internal) files.*/
-    private boolean saveInternal(File file, boolean isInternal) {
+    /** This method is intended to provide both normal save routines and saving of temporary (internal) files.
+     * @throws Exception */
+    private boolean saveInternal(File file, boolean isInternal) throws Exception {
         if (!isInternal && readOnly) { // unexpected situation, yet it's better to back it up
             System.err.println("Attempt to save read-only map.");
             return false; }
@@ -271,6 +273,8 @@
                 getFrame().getController().errorMessage(message);
             else
                 getFrame().out(message);
+        } catch(IOException e) {
+        	throw new Exception("Cannot save file while encrypted nodes are locked. Toggle them, then resave.");
         } catch(Exception e) {
             logger.severe("Error in MindMapMapModel.save(): ");
             freemind.main.Resources.getInstance().logException(e);
diff --git a/FreeMind_integration/freemind/modes/mindmapmode/actions/ExportBranchAction.java b/FreeMind_integration/freemind/modes/mindmapmode/actions/ExportBranchAction.java
index b15d46a..bf6a5d0 100644
--- a/FreeMind_integration/freemind/modes/mindmapmode/actions/ExportBranchAction.java
+++ b/FreeMind_integration/freemind/modes/mindmapmode/actions/ExportBranchAction.java
@@ -60,7 +60,12 @@
         if (mMindMapController.getMap().getFile() == null) {
             mMindMapController.getFrame().out(
                     "You must save the current map first!");
-            mMindMapController.save();
+            try {
+				mMindMapController.save();
+			} catch (Exception e1) {
+				// TODO Auto-generated catch block
+				e1.printStackTrace();
+			}
         }
 
         // Open FileChooser to choose in which file the exported
@@ -134,7 +139,12 @@
                     .createModeController();
             MindMapMapModel map = new MindMapMapModel(node, mMindMapController
                     .getFrame(), newModeController);
-            map.save(chosenFile);
+            try {
+				map.save(chosenFile);
+			} catch (Exception e1) {
+				// TODO Auto-generated catch block
+				e1.printStackTrace();
+			}
             // new node instead:
             MindMapNode newNode = mMindMapController.addNewNode(parent,
                     nodePosition, node.isLeft());
diff --git a/FreeMind_integration/freemind/modes/schememode/SchemeController.java b/FreeMind_integration/freemind/modes/schememode/SchemeController.java
index dc4a55d..2ade174 100644
--- a/FreeMind_integration/freemind/modes/schememode/SchemeController.java
+++ b/FreeMind_integration/freemind/modes/schememode/SchemeController.java
@@ -88,7 +88,12 @@
 			//      if(!ext.equals(freemind.main.FreeMindCommon.FREEMIND_FILE_EXTENSION_WITHOUT_DOT)) {
 			//          f = new File(f.getParent(),f.getName()+freemind.main.FreeMindCommon.FREEMIND_FILE_EXTENSION);
 			//      }
-			save(f);
+			try {
+				save(f);
+			} catch (Exception e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
 			//Update the name of the map
 			updateMapModuleName();
 			return true;